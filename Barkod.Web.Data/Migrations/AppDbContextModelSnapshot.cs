// <auto-generated />
using System;
using BarkodWeb.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BarkodWeb.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BarkodWeb.Entity.Entities.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("8bed9d96-a7dd-4ac6-9aa1-5a62aa289b16"),
                            ConcurrencyStamp = "e33f953f-810c-4c47-98c1-6afe3252002b",
                            Name = "Superadmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = new Guid("cbefda7b-7761-42c4-aa47-40c7ed3d04a1"),
                            ConcurrencyStamp = "03177f72-1569-450d-bc19-2f9052e34cf8",
                            Name = "Magaza Sahibi",
                            NormalizedName = "MAGAZA SAHİBİ"
                        },
                        new
                        {
                            Id = new Guid("e2c488b7-f933-45a1-b8c3-55ae4067879d"),
                            ConcurrencyStamp = "06a13dfa-6b73-4031-a13b-2cb1dd6b958c",
                            Name = "Personel",
                            NormalizedName = "PERSONEL"
                        });
                });

            modelBuilder.Entity("BarkodWeb.Entity.Entities.AppRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("BarkodWeb.Entity.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<Guid?>("BossId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ShopId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("ShopId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("BarkodWeb.Entity.Entities.AppUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("BarkodWeb.Entity.Entities.AppUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("BarkodWeb.Entity.Entities.AppUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("BarkodWeb.Entity.Entities.AppUserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BarkodWeb.Entity.Entities.LowerGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AltGrup")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MainGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ShopId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MainGroupId");

                    b.HasIndex("ShopId");

                    b.ToTable("LowerGroups");
                });

            modelBuilder.Entity("BarkodWeb.Entity.Entities.MainGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AnaGrup")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ShopId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ShopId");

                    b.ToTable("MainGroups");
                });

            modelBuilder.Entity("BarkodWeb.Entity.Entities.Repair", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Adet")
                        .HasColumnType("int");

                    b.Property<int>("Fiyat")
                        .HasColumnType("int");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Isim")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Islem")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Masraf")
                        .HasColumnType("int");

                    b.Property<Guid?>("ShopId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Tel")
                        .HasColumnType("int");

                    b.Property<string>("UrunTuru")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ShopId");

                    b.ToTable("Repairs");
                });

            modelBuilder.Entity("BarkodWeb.Entity.Entities.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Gelir")
                        .HasColumnType("bit");

                    b.Property<bool?>("Gider")
                        .HasColumnType("bit");

                    b.Property<string>("Hasılat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Tarih")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("BarkodWeb.Entity.Entities.Sale", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AlisFiyat")
                        .HasColumnType("int");

                    b.Property<string>("Barkod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gram")
                        .HasColumnType("int");

                    b.Property<int>("Hasılat")
                        .HasColumnType("int");

                    b.Property<Guid?>("LowerGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MainGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OdemeTuru")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParaKuru")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SatisFiyat")
                        .HasColumnType("int");

                    b.Property<DateTime>("SatisTarih")
                        .HasColumnType("datetime2");

                    b.Property<int>("SatılanStok")
                        .HasColumnType("int");

                    b.Property<Guid?>("ShopId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UrunBirimi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LowerGroupId");

                    b.HasIndex("MainGroupId");

                    b.HasIndex("ShopId");

                    b.ToTable("sales");
                });

            modelBuilder.Entity("BarkodWeb.Entity.Entities.Shop", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Adı")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("BossId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Shops");
                });

            modelBuilder.Entity("BarkodWeb.Entity.Entities.Stock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AlisFiyat")
                        .HasColumnType("int");

                    b.Property<string>("Barkod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gram")
                        .HasColumnType("int");

                    b.Property<Guid>("LowerGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MainGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ParaKuru")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SatisFiyat")
                        .HasColumnType("int");

                    b.Property<Guid>("ShopId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Stok")
                        .HasColumnType("int");

                    b.Property<DateTime>("Tarih")
                        .HasColumnType("datetime2");

                    b.Property<string>("UrunBirimi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LowerGroupId");

                    b.HasIndex("MainGroupId");

                    b.HasIndex("ShopId");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("BarkodWeb.Entity.Entities.AppRoleClaim", b =>
                {
                    b.HasOne("BarkodWeb.Entity.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BarkodWeb.Entity.Entities.AppUser", b =>
                {
                    b.HasOne("BarkodWeb.Entity.Entities.Shop", "Shop")
                        .WithMany("appUsers")
                        .HasForeignKey("ShopId");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("BarkodWeb.Entity.Entities.AppUserClaim", b =>
                {
                    b.HasOne("BarkodWeb.Entity.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BarkodWeb.Entity.Entities.AppUserLogin", b =>
                {
                    b.HasOne("BarkodWeb.Entity.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BarkodWeb.Entity.Entities.AppUserRole", b =>
                {
                    b.HasOne("BarkodWeb.Entity.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BarkodWeb.Entity.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BarkodWeb.Entity.Entities.AppUserToken", b =>
                {
                    b.HasOne("BarkodWeb.Entity.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BarkodWeb.Entity.Entities.LowerGroup", b =>
                {
                    b.HasOne("BarkodWeb.Entity.Entities.MainGroup", "MainGroup")
                        .WithMany("LowerGroups")
                        .HasForeignKey("MainGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BarkodWeb.Entity.Entities.Shop", "Shop")
                        .WithMany("lowerGroups")
                        .HasForeignKey("ShopId");

                    b.Navigation("MainGroup");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("BarkodWeb.Entity.Entities.MainGroup", b =>
                {
                    b.HasOne("BarkodWeb.Entity.Entities.Shop", "Shop")
                        .WithMany("mainGroups")
                        .HasForeignKey("ShopId");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("BarkodWeb.Entity.Entities.Repair", b =>
                {
                    b.HasOne("BarkodWeb.Entity.Entities.Shop", "Shop")
                        .WithMany("Repairs")
                        .HasForeignKey("ShopId");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("BarkodWeb.Entity.Entities.Sale", b =>
                {
                    b.HasOne("BarkodWeb.Entity.Entities.LowerGroup", "LowerGroup")
                        .WithMany("Sales")
                        .HasForeignKey("LowerGroupId");

                    b.HasOne("BarkodWeb.Entity.Entities.MainGroup", "MainGroup")
                        .WithMany("Sales")
                        .HasForeignKey("MainGroupId");

                    b.HasOne("BarkodWeb.Entity.Entities.Shop", "Shop")
                        .WithMany("Sales")
                        .HasForeignKey("ShopId");

                    b.Navigation("LowerGroup");

                    b.Navigation("MainGroup");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("BarkodWeb.Entity.Entities.Stock", b =>
                {
                    b.HasOne("BarkodWeb.Entity.Entities.LowerGroup", "LowerGroup")
                        .WithMany("Stocks")
                        .HasForeignKey("LowerGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BarkodWeb.Entity.Entities.MainGroup", "MainGroup")
                        .WithMany("Stocks")
                        .HasForeignKey("MainGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BarkodWeb.Entity.Entities.Shop", "Shop")
                        .WithMany("Stocks")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LowerGroup");

                    b.Navigation("MainGroup");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("BarkodWeb.Entity.Entities.LowerGroup", b =>
                {
                    b.Navigation("Sales");

                    b.Navigation("Stocks");
                });

            modelBuilder.Entity("BarkodWeb.Entity.Entities.MainGroup", b =>
                {
                    b.Navigation("LowerGroups");

                    b.Navigation("Sales");

                    b.Navigation("Stocks");
                });

            modelBuilder.Entity("BarkodWeb.Entity.Entities.Shop", b =>
                {
                    b.Navigation("Repairs");

                    b.Navigation("Sales");

                    b.Navigation("Stocks");

                    b.Navigation("appUsers");

                    b.Navigation("lowerGroups");

                    b.Navigation("mainGroups");
                });
#pragma warning restore 612, 618
        }
    }
}
